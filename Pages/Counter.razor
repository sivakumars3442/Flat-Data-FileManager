@page "/counter"
@using Amazon;
@using Amazon.S3;
@using Amazon.S3.Model;
@using Amazon.S3.Transfer;
@using System.Text;
@using System.Text.Json;
@using Syncfusion.Blazor.FileManager;
@using TestSyncfusion.Data;
@inject CloudService CloudService;
@inject CloudServiceOperations CloudServiceOperations;
@inject IJSRuntime JsRuntime;
<div class="control-section">
	@* Initialization of default File Manager component *@
	@if (Data != null)
	{
		<SfFileManager TValue="FileManagerDirectoryContent">
			<FileManagerEvents TValue="FileManagerDirectoryContent" BeforeImageLoad="BeforeImageLoad" FileSelected="FileSelected" FileSelection="FileSelection" OnSend=onSend></FileManagerEvents>
		</SfFileManager>
	}
	@if (Data == null)
	{
		<h1>Waiting for Injected Amazon service response to get the initial response of FileManager component...</h1>
	}
</div>
@code{
	public List<FileManagerDirectoryContent>? Data;
	public HttpClient HttpClientInstance = new HttpClient();
	protected override async Task OnInitializedAsync()
	{
		await CloudService.GetData();
		Data = CloudService.FileData;
	}

	public void onSend(BeforeSendEventArgs args)
	{
		if (args.Action == "read")
		{
			args.Response = CloudServiceOperations.Read(args.Path, Data, args.FileDetails);
		}
		if(args.Action == "delete")
		{
			args.Response = CloudServiceOperations.Delete(args.Path, Data, args.FileDetails);
		}
		if(args.Action == "details")
		{
			args.Response = CloudServiceOperations.Details(args.Path, Data, args.FileDetails);
		}
		if(args.Action == "create")
		{
			args.Response = CloudServiceOperations.Create(args.Path, args.CreatedFolderName, Data, args.FileDetails);
		}
		if(args.Action == "search")
		{
			args.Response = CloudServiceOperations.Search(args.Path, args.SearchString, Data, args.FileDetails);
		}
		if(args.Action == "rename")
		{
			args.Response = CloudServiceOperations.Rename(args.Path, args.NewName, Data, args.FileDetails);
		}
		if(args.Action == "move")
		{
			args.Response = CloudServiceOperations.Move(args.Path, args.TargetData, Data, args.FileDetails);
		}
		if(args.Action == "copy")
		{
			args.Response = CloudServiceOperations.Copy(args.Path, args.TargetData, Data, args.FileDetails);
		}
	}

	public void FileSelected(FileSelectEventArgs<FileManagerDirectoryContent> args)
	{

	}

	public void FileSelection(FileSelectionEventArgs<FileManagerDirectoryContent> args)
	{
		
	}

	public void BeforeImageLoad(BeforeImageLoadEventArgs<FileManagerDirectoryContent> args)
	{

	}
}

